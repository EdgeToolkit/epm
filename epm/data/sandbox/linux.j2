# This script was generated by epm for sandbox command 
# {{ name }} of profile {{ profile.name }} scheme {{ scheme.name }}
# You can use environment vars to run on shell or docker
#  EPM_SANDBOX_RUNNER: [docker, shell]
#     if not set and docker installed, then use docker,
#     otherwise use shell
#  EPM_SANDBOX_STORAGE: path
#     conan storage path, if not set use ~/.epm/.conan/data
#
# normally you should invoke this in project directory
# .epm/{{ folder.name }}/sandbox/{{name}}
#
# Actually, you do not have to call this script directly.
# You should use epm sandbox command like below 
# !!! MAKE SURE you are in project directory
#    epm sandbox --profile {{ profile.name }} {{ '--scheme %s' % scheme.name if scheme.name else '' }} {{ name }}
###########################################################
_runner=$EPM_SANDBOX_RUNNER
_storage=$EPM_SANDBOX_STORAGE
_sudo=$EPM_SANDBOX_SUDO
_home=$EPM_SANDBOX_HOME
_project=$EPM_SANDBOX_PROJECT
_image=$EPM_SANDBOX_IMAGE
_shell=$EPM_SANDBOX_SHELL
_dshell=$EPM_SANDBOX_DOCKER_SHELL
_dhome=$EPM_SADNBOX_DOCKER_HOME
_dimage=$EPM_SANDBOX_DOCKER_IMAGE
[ -z $_storage ] && _storage=$CONAN_STORAGE_PATH
[ -z $_storage ] && _storage=~/.epm/.conan/data
[ -z $_runner  ] && _runner='auto'
[ -z $_project ] && _project=$PWD

if [ -z $_shell ]; then
  if [ -f /bin/bash ]; then
    _shell=/bin/bash
  else
    _shell=/bin/sh
  fi
fi

if [ -z $_sudo ]; then
  $(which sudo > /dev/null)
  if [ -$? -eq 0 ]; then
    _sudo=sudo
  else
    _sudo=
  fi
fi

if [ "$_runner" = "auto" ]; then
  $(which docker > /dev/null)
  _has_docker=$?
  if [ $_has_docker -eq 0 ]; then
    _runner='docker'
  else
    _runner='shell'
  fi
fi

if [ "$_runner" = "docker" ]; then
  [ -z $_dimage   ] && _dimage={{ docker['image'] }}
  [ -z $_dhome    ] && _dhome={{ docker['home'] }}
  [ -z $_dshell   ] && _dshell={{ docker['shell'] }}

else
  [ -z $_home    ] && _home=$(cd ~;pwd)
fi

_mount()
{
    home=$1
    storage=$2
    project=$3

    $_sudo rm -rf $_home/.sandbox
    $_sudo mkdir -p $_home/.sandbox

    $_sudo chmod 777 $_home/.sandbox

    mkdir -p $home/.sandbox/lib
    mkdir -p $home/.sandbox/bin


    {% for libname, lib in dylibs.items() %}
    ln -s {{ lib['target']}} $home/.sandbox/lib/{{ libname }}
    {% endfor %}

    ln -s {{ filename }} $home/.sandbox/bin/{{ name }}

}

_docker_exec()
{
  home=$_dhome
  image=$_dimage
  shell=$_dshell
  storage=$home/@host/conan.storage
  project=$home/@host/project

  {%set cname = folder.name.replace('@','.').replace('/','') %}

  _CMD="docker run -t --rm --name {{package_name}}--sandbox.{{ name }}--{{cname}}.{{ range(100000, 999999) | random }}"
  {% if sandbox.privileged %}
  _CMD=" $_CMD --privileged"
  {% endif %}
  {% for port in sandbox.ports %}
  _CMD=" $_CMD -p {{port}}:{{port}}"
  {% endfor %}

  _CMD=" $_CMD -v $_storage:${storage}"
  _CMD=" $_CMD -v $_project:${project}"
  _CMD=" $_CMD -e EPM_SANDBOX_STORAGE=${storage}"
  _CMD=" $_CMD -e EPM_SANDBOX_PROJECT=${project}"
  _CMD=" $_CMD -e EPM_SADNBOX_SHELL=${shell}"
  _CMD=" $_CMD -e EPM_SANDBOX_HOME=${home}"
  _CMD=" $_CMD -e EPM_SANDBOX_RUNNER=shell"
  _CMD=" $_CMD -w $home"
  _CMD=" $_CMD $image $shell -c "

  $_sudo $_CMD "${project}/.epm/{{ folder.name }}/sandbox/{{ name }} $*"
}
#
#
#
set -e

if [ "$_runner" = "shell" ]; then
   _mount $_home $_storage $_project
   export LD_LIBRARY_PATH=$_home/.sandbox/lib:$LD_LIBRARY_PATH

   {% if sandbox.privileged %}
   if [ -z $_sudo ]; then
     $_home/.sandbox/bin/{{ name }} {{ arguments }} $*
   else
     sudo -E $_shell -c "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH && $_home/.sandbox/bin/{{ name }} {{ arguments }} $*"
   fi
   {% else %}
   $_home/.sandbox/bin/{{ name }} {{ arguments }} $*
   {% endif %}

else
   _docker_exec $*
fi