{%- set profile = project.profile -%}
{%- set scheme = project.scheme -%}
{%- set name = name or project.name -%}
{%- set program_dir = "{}/{}".format(project.folder.program, executable.name) -%}
# This script was generated by epm for sandbox command
# {{ name }} of profile {{ profile.name }} scheme {{ scheme.name }}
# You can set environment vars to run on shell or docker
#  EPM_SANDBOX_RUNNER: [docker, shell]
#     If this was not set, docker be token into account first, then then shell
#  EPM_SANDBOX_STORAGE: path
#     conan storage path, if not set use ~/.epm/.conan/data
#
# normally you should invoke this in project directory
# .epm/{{ project.folder.name }}/sandbox/{{name}}
#
# Actually, you do not have to call this script directly.
# You should use epm sandbox command like below 
# !!! MAKE SURE you are in project directory
#    epm sandbox --profile {{ profile.name }} {{ '--scheme %s' % scheme.name if scheme.name else '' }} {{ name }}

# EPM_SANDBOX_SUDO
# EPM_SANDBOX_RUNNER:
# EPM_SANDBOX_SHELL:
# EPM_SANDBOX_STORAGE:
# EPM_SADNBOX_PROJECT:
# EPM_SANDBOX_DIRECTORY:
# EPM_SANDBOX_LOGLEVEL
###########################################################
__name__={{project.name}}
__version__={{project.version}}
__reference__={{project.reference}}
__reference_dir__={{project.reference.dir_repr()}}
__package_id__={{package_id}}

_() {
  if [ -n "$EPM_SANDBOX_LOGLEVEL" ]; then
    echo "$1"
  fi
}

# =====================================
# directory of project {{project.name}}
# =====================================
__project__=$EPM_SADNBOX_PROJECT
if [ -z "$__project__" ]; then
  __project__=$PWD
fi
# =====================================
# deduce runner shell|docker
# =====================================
__runner__=$EPM_SANDBOX_RUNNER
if [ -z "$__runner__" ]; then
  docker_path=$(which docker)
  if [ -f $docker_path ]; then
    __runner__='docker'
  else
    __runner__='shell'
  fi
fi

# =====================================
# deduce storage
# =====================================
__storage__=$EPM_SANDBOX_STORAGE
if [ -z "$__storage__" ]; then
  if [ -n "$CONAN_STORAGE_PATH" ]; then
    __storage__=$CONAN_STORAGE_PATH
  else
    if [ -z "$EPM_HOME_DIR" ]; then
      __storage__=$EPM_HOME_DIR/.epm/.conan/data
    else
      __storage__=$HOME/.epm/.conan/data
    fi
  fi
fi


# ---------------------------------------------------------
# if not set shell use /bin/bash or /bin/sh
# ---------------------------------------------------------
__shell__=$EPM_SANDBOX_SHELL
if [ -z "$__shell__" ]; then
  if [ ! -f /bin/sh ]; then
    __shell__=/bin/sh
  else
    __shell__=/bin/bash
  fi
fi

# ---------------------------------------------------------
# us sudo if install in running system
# ---------------------------------------------------------
__sudo__=$EPM_SANDBOX_SUDO
if [ -z "$__sudo__" ]; then
  __sudo__=$(which sudo)
  if [ ! -f "$__sudo__" ]; then
    __sudo__=
  fi
fi

# =====================================
# location of program make by command
# epm <{{command}}> and output `{{where}}`.
# =====================================
{% if where == 'project' %}
  __origin__='project'
  __program__={{program_dir}}/{{filename}}
{% else %}
{%     if command == 'create' %}
  __origin__='storage'
  __program__=$__reference_dir__/package/$__package_id__/{{filename}}
{%     else %}  
  __origin__='project'
  __program__={{project.folder.out}}/package/{{filename}}
{%     endif %}
{% endif %}

  __libpath__=
{% if command == 'create' and libs %}
  # -------------------------------------------------------
  # link {{project.name}} package libraries to sandbox
  # -------------------------------------------------------
{% for lib in dirs.lib or [] %}
  __libpath__=${__storage__}/{{lib}}:$libpath
{%- endfor %}
{% endif %}

  # -------------------------------------------------------
  # {{project.name}} package depend libraries
  # -------------------------------------------------------
{% for lib in dirs.dep or [] %}
  __libpath__=${__storage__}/{{lib}}:$libpath
{%- endfor %}

print_info()
{
  _ "__name__: $__name__"
  _ "__version__: $__version__"
  _ "__reference__: $__reference__"
  _ "__reference_dir__: $__reference_dir__"
  _ "__package_id__: $__package_id__"
  _ "__project__: $__project__"
  _ "__runner__: $__runner__"
  _ "__storage__: $__storage__"
  _ "__shell__: $__shell__"
  _ "__sudo__: $__sudo__"
  _ "__origin__: $__origin__"
  _ "__program__: $__program__"
  _ "__libpath__: $__libpath__"
  _ "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"  
}


# ---------------------------------------------------------
# docker execute command
# ---------------------------------------------------------
docker_exec()
{
{% set docker = profile.docker.runner or {} %}  
  shell=$EPM_SANDBOX_DOCKER_SHELL
  if [ -z "$shell" ]; then
    shell={{ docker['shell'] }}
  fi
  image=$EPM_SANDBOX_DOCKER_IMAGE
  if [ -z "$image" ]; then
    image={{ docker['image'] }}
  fi

  storage=/tmp/.sandbox/{{project.name}}/storage
  project=/tmp/.sandbox/{{project.name}}/project

  _CMD="docker run -t --rm"
  _CMD=" $_CMD -v $__storage__:${storage}"
  _CMD=" $_CMD -v $__project__:${project}"
  _CMD=" $_CMD -e EPM_SANDBOX_STORAGE=${storage}"
  _CMD=" $_CMD -e EPM_SANDBOX_PROJECT=${project}"
  _CMD=" $_CMD -e EPM_SANDBOX_RUNNER=shell"
  _CMD=" $_CMD -e EPM_SANDBOX_LOGLEVEL=$EPM_SANDBOX_LOGLEVEL"  
  _CMD=" $_CMD -w ${project}"
  _CMD=" $_CMD $image $shell -c "

  _ "$__sudo__ $_CMD ${project}/.epm/{{ project.folder.name }}/sandbox/{{executable.name}} {{ arguments }} $*"
  $__sudo__ $_CMD "${project}/.epm/{{ project.folder.name }}/sandbox/{{executable.name}} {{ arguments }} $*"
}
#
#
#
set -e

if [ "$__runner__" = "shell" ]; then
  _ "    ----====  shell  ====----"
{%- if command == 'create' %}
  export LD_LIBRARY_PATH=$__libpath__:$LD_LIBRARY_PATH
{%- else %}
  libpath=$__project__/build/lib:$__project__/{{project.folder.out}}/package/lib
  export LD_LIBRARY_PATH=$libpath:$LD_LIBRARY_PATH
{%- endif %}
  print_info
  if [ $__origin__ == "project" ]; then
    _ "$__project__/$__program__ {{ arguments }} $*"
    $__project__/$__program__ {{ arguments }} $*
  else
    _ "$__storage__/$__program__ {{ arguments }} $*" 
    $__storage__/$__program__ {{ arguments }} $*
  fi

else
  _ "    ~~~~==~~~~  docker  ~~~~~==~~~~"
  print_info
  docker_exec $*
fi
